
/**
 * Specifies top-level structures used for generic inventory item storage. Inventory items are essentially concrete
 * products, combined with an amount/variant specification, into various parameters (amount on hand, amount ready for
 * sale, and so on).
 */
syntax = "proto3";

package opencannabis.inventory;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.inventory";
option java_multiple_files = true;
option go_package = "github.com/OpenCannabis/protocol/opencannabis/inventory";

import "opencannabis/core/datamodel.proto";

import "opencannabis/base/ProductKey.proto";
import "opencannabis/temporal/Instant.proto";

import "opencannabis/commerce/Item.proto";
import "opencannabis/products/menu/Menu.proto";
import "opencannabis/structs/pricing/PricingDescriptor.proto";


// Key structure for inventory records. Identifies the product being inventoried, with a unique ID set upon creation or
// allocation of the record.
message InventoryKey {
  // Key record uniquely identifying this inventory product. Keys for saved items are lifted to this property from the
  // attached concrete record below.
  opencannabis.base.ProductKey key = 1 [
    (core.field).type = KEY
  ];

  // Unique ID provisioned for this inventory item.
  string uuid = 2;
}


// Structured information specifying a location where an inventory product can exist. Sets of coordinates are generated
// or resolved when an inventory item is created or allocated, and further updated as the inventory item moves through
// process or physically moves around. How inventory coordinates are used entirely depends on how a partner wants to use
// them, with varying degrees of specificity possible.
message InventoryCoordinates {
  // Location code. Specifies a physical location where the inventory product is held. This is the highest-resolution
  // property specifying inventory coordinates. Optional.
  string location = 1;

  // Zone code. This property is usually meant to be nested under the value for `location` - i.e., a zone code inside
  // given location code. Optional.
  string zone = 2;

  // Rack code. This property is optional and is usually meant to be nested under the value for `zone` - i.e., a rack
  // code or number is inside a given zone which is inside a given location. Optional.
  string rack = 3;

  // Shelf code. This property is optional and is usually meant to be nested under the value for `rack` - i.e., a shelf
  // code or number is inside a given rack which is inside a zone which is inside a location. Optional.
  string shelf = 4;

  // Bin code. This property is optional and is usually meant to be global, although it may be nested as well if bins
  // are anonymous in the target partner system.
  string bin = 5;

  // Batch code. Used to correlate test results and other data. Optional. Usually meant to be used as a global property,
  // but can be nested under any of the other inventory coordinate values. How this property is used is determined by
  // the hosting/invoking/subject partner.
  string batch = 6;
}


// Specifies an amount of a particular product, which may take a certain state as part of an inventory item, or batch of
// inventory for a given product.
message InventoryAmount {
  // Type of pricing/inventory to employ for this product. Can either be `UNIT` or `WEIGHTED` pricing.
  opencannabis.structs.pricing.PricingType type = 1;

  // Specifies the unit basis for a subject inventory item. The unit basis is either set to `UNIT` pricing, or the
  // weight used as a unit for inventory.
  oneof basis {
    // The inventory item is unit-based, i.e., just individual items.
    bool unit = 2;

    // The inventory item is weight-based, i.e., a certain amount of grams or pounds.
    opencannabis.structs.pricing.PricingWeightTier weight = 3;
  }

  // Actual amount specified for the given inventory.
  uint64 quantity = 4;
}


// Specifies the structure of an inventory state checkin, including the inventory item's status at the time the checkin
// was submitted, timestamp information, and the set of coordinates where the checkin took place.
message InventoryState {
  // Available statuses that an inventory item may take, in a given inventory step.
  enum Status {
    // Specifies a status where a given batch of inventory has not yet been reconciled with ledger/database services,
    // and is therefore considered ephemeral, or held-in-suspense, until further action is taken.
    UNRECONCILED = 0;

    // Indicates a status where a given batch of inventory is currently in the process of being "received," consisting
    // of initial unpackaging, re-packaging, and inventory checkin/update.
    RECEIVING = 1;

    // Indicates a status where a given batch of inventory is held in quarantine, awaiting the results of lab testing,
    // or regarded as unfit for sale for some other reason.
    QUARANTINE = 2;

    // Indicates a status where a given batch of inventory is held on-hand in storage, awaiting further action.
    ON_HAND = 3;

    // Status indicating that a product/inventory batch is currently listed for sale, or otherwise available for
    // purchase, distribution, or resale.
    FOR_SALE = 4;

    // Indicates that a particular inventory batch is fully claimed, and may soon be committed, assuming payment
    // settling and other steps take place.
    CLAIMED = 5;

    // Indicates that a particular inventory batch or inventory item has been fully committed-to, meaning, it will soon
    // or has already left the posession of the (now, or soon-to-be former) owning partner.
    COMMITTED = 6;
  }

  // Status of the inventory item. Specifies the active state for the inventory item, from a set of enumerated standard
  // inventory states.
  Status status = 1;

  // Specifies the new (target) coordinates for a given inventory item, a change that occurred with a given inventory
  // item checkin.
  InventoryCoordinates coordinates = 2;

  // Indicates whether the inventory item is fit for sale, or not. This flag must be set to `true` for an item to be
  // eligible for listing.
  bool fit_for_sale = 3;

  // Amount of inventory, in this batch, that is on-hand.
  InventoryAmount amount = 4;

  // Timestamp for when this inventory state entry was created. Set after initially saving an inventory state checkin.
  opencannabis.temporal.Instant created = 98;

  // Timestamp for when this inventory state entry was updated, if applicable. Set after saving an existing inventory
  // state checkin.
  opencannabis.temporal.Instant modified = 99;
}


// Menu product payload stanza. Specifies a single product as a member of a menu section. This generic record is used to
// wrap concrete menu product structures to make them generically usable. In V2 data stores, menu products are stored
// generically as a top-level entity (as opposed to V1, in which this model is synthesized from raw map data).
message InventoryProduct {
  option (core.db) = {
    mode: GROUP
    path: "inventory"
  };

  // Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
  // which is set upon inventory item allocation (either provided explicitly or auto-generated).
  InventoryKey key = 1;

  // SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
  // item, potentially to/from foreign or 3rd-party systems.
  repeated string sku = 2;

  // Product variance specifications. Each variant spec describes a variance property and value for this product.
  // Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
  // in "these hats are the color red."
  repeated opencannabis.commerce.VariantSpec variant = 3;

  // Current/active state for this inventory product. This includes the active status and coordinates for the item, with
  // timestamping information detailing when the status last changed.
  InventoryState state = 10;

  // Full history for an inventory product, including every inventory state for the item since its creation. Every item
  // in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
  // added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
  // replaced with the new state.
  repeated InventoryState history = 11;

  // Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
  // results), and so on.
  opencannabis.products.menu.MenuProduct item = 20;
}
