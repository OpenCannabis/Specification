
/**
 * Provides structures for specifying the subject of a media image as well as the structure to specify a specific media
 * item. Enumerates various media stages and privacy.
 */
syntax = "proto3";

package opencannabis.media;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.media";
option java_multiple_files = false;
option java_outer_classname = "AttachedMedia";
option go_package = "github.com/OpenCannabis/protocol/opencannabis/labtesting";

import "opencannabis/core/datamodel.proto";

import "opencannabis/media/MediaKey.proto";
import "opencannabis/media/MediaType.proto";
import "opencannabis/base/ProductKey.proto";

import "opencannabis/temporal/Instant.proto";


// Specifies the subject properties of this media. That is to say, properties of the item of which this media is the
// subject. Also referred to as this media item's "parent" in some cases.
message MediaSubject {
  // Specified subject attachment for this media. Can be a product key, or a partnership, or location-level key, to
  // facilitate later garbage collection of unused media.
  oneof attachment {
    // Specify a product key as the subject parent of this media.
    opencannabis.base.ProductKey product = 2;

    // Specify a partner as the subject parent of this media.
    string partner = 3;

    // Specify a partner and location as the subject parent of this media.
    string location = 4;

    // Specify a partner brand as the subject parent of this media.
    string brand = 5;

    // Specify this media as global. This is a special flag that should only be used internally.
    bool global = 6;
  }
}


// Specifies the states an individual media item may exist in. This covers the process of uploading/provisioning a media
// item, optimizing/compressing/transforming it, and marking it as ready for serving.
enum MediaStatus {
  // The media item has been provisioned, but is not yet subject to a resume-able write operation (at which point, the
  // media item would be 'PENDING').
  PROVISIONED = 0;

  // The media item is in the process of being uploaded or otherwise processed. It is not ready yet to be served and may
  // not even yet have underlying data written.
  PENDING = 1;

  // Data for the subject media item has been uploaded and written, but the media item has yet to be attached to its
  // subject data in the backing datastore, so it is not ready for serving yet.
  UPLOADED = 2;

  // This media item is ready to be served, and may include an optimized serving URL to be used instead of the raw URL
  // for the item in storage.
  READY = 3;
}


// Specifies the allowed access scope for an individual media item. By default, uploaded items are accessible to users
// at the same partner location as the uploading user. That access can be extended to the entire partner (all locations)
// or the media item can be published for public serving.
enum MediaPrivacy {
  // Default privacy mode. At the time of this writing, this is defined as an access scheme where all users with read
  // permission on the partner location account matching the uploading user are granted access.
  DEFAULT_PRIVACY = 0;

  // All accounts in the entire partner organization should be able to see, access, and download this media item.
  PARTNER = 1;

  // The subject media item is published globally, and can be accessed by anyone with the link on the open Internet.
  PUBLIC = 2;
}


// Describes a pending upload operation, which may be waiting for data to finish uploading to underlying storage before
// the resulting record is attached to its subject owner (partner/location account, product, user, etc).
message MediaUpload {
  option (core.db) = {
    mode: GROUP
    path: "uploads"
  };

  // Unique token identifying this media upload operation. This token is provisioned when the upload operation begins,
  // and is used to track and later attach the resulting data.
  string token = 1 [
    (core.field).type = ID,
    (core.field).description = "Unique ID/token for this upload operation."
  ];

  // Upload operation ID, provided by GCS upon initializing a resume-able upload operation.
  string operation = 2 [
    (core.field).description = "Upload operation ID, assigned by GCS."
  ];

  // Media item provided during this upload operation.
  MediaItem media = 3 [
    (core.collection).mode = NESTED,
    (core.field).description = "Media item to be attached after this operation completes."
  ];

  // Mime-type for the file uploaded as part of this media operation. This should be known ahead of time.
  string mime = 4 [
    (core.field).description = "Mimetype for the file uploaded as part of this media operation."
  ];

  // Size, in bytes, of the item uploaded in this operation.
  uint64 size = 5 [
    (core.field).description = "Size, in bytes, of the item uploaded in this operation."
  ];

  // Whether this upload operation has completed or not.
  bool finished = 6 [
    (core.field).description = "Whether this upload operation has completed or not."
  ];

  // MD5 hash for the data uploaded. Usually filled in afterwards but may be specified before the upload to check
  // integrity of uploaded data.
  string md5 = 7 [
    (core.field).description = "MD5 hash for the data uploaded."
  ];

  // CRC32 hash for the data uploaded. Usually filled in afterwards but may be specified before the upload to check
  // integrity of uploaded data.
  string crc32 = 8 [
    (core.field).description = "CRC32 hash for the data uploaded."
  ];

  // User account that initiated this upload operation.
  string owner = 9 [
    (core.field).description = "User account that initiated this upload operation."
  ];

  // Path to the underlying file in GCS, without a bucket.
  string path = 10 [
    (core.field).description = "Path in GCS to the underlying file."
  ];

  // Parent upload, in cases where an upload is performed over an existing item (overwriting it).
  string parent = 11 [
    (core.field).description = "Previous upload version for this same media item."
  ];

  // Timestamp for when this upload operation was created.
  opencannabis.temporal.Instant created = 20 [
    (core.field).description = "Timestamp for when this upload operation was created."
  ];

  // Timestamp for when this upload operation was completed.
  opencannabis.temporal.Instant completed = 21 [
    (core.field).description = "Timestamp for when this upload operation was completed."
  ];
}


// Describes an individual media item, which can be an image, video, etc. Media at its most basic is simply binary blob
// data persisted in GCS and tracked with a corresponding DB record. Document types (like PDF, HTML, TXT) are all
// supported in addition to traditional rich media (images, video, sound).
message MediaItem {
  option (core.db) = {
    mode: GROUP
    path: "media"
  };

  // Key uniquely identifying this media item.
  MediaKey key = 1 [
    (core.field).type = KEY,
    (core.field).description = "Key uniquely identifying this media item."
  ];

  MediaStatus status = 2 [
    (core.field).description = "Status for this individual media item."
  ];

  // Type of media this is describing.
  MediaType type = 3 [
    (core.field).description = "Type of media this is describing."
  ];

  // Friendly name for this media.
  string name = 4 [
    (core.field).description = "Friendly name for this media."
  ];

  // Origin URI to this media.
  string uri = 5 [
    (core.field).description = "Absolute URI to this media."
  ];

  // Serving URI for this media, if it differs from the origin URI.
  string serving_uri = 6 [
    (core.field).description = "Serving URI for this media, if it differs from the origin URI."
  ];

  // Privacy setting for this media item. Defaults to location-wide access.
  MediaPrivacy privacy = 7 [
    (core.field).description = "Privacy mode for this media item."
  ];

  // Timestamp for when this record was created.
  opencannabis.temporal.Instant created = 8 [
    (core.field).description = "Timestamp for when this record was created."
  ];

  // Timestamp for when this record was last modified.
  opencannabis.temporal.Instant modified = 9 [
    (core.field).description = "Timestamp for when this record was last modified."
  ];

  // Timestamp for when this media item was originally published.
  opencannabis.temporal.Instant published = 10 [
    (core.field).description = "Timestamp for when this media item was originally published."
  ];

  // Ownership scope for this media item.
  string scope = 11 [
    (core.field).description = "Ownership scope for this media item."
  ];

  // Most recent upload token for this media item.
  string token = 12 [
    (core.field).description = "Most recent upload token for this media item."
  ];
}
