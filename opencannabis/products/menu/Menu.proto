
/**
 * Specifies structures that, together, form a composed menu product, which is defined as a payload that specifies
 * individual product entries, enumerated by type or section. Usually, menu structures are used to present product
 * data in one way or another.
 */
syntax = "proto3";

package opencannabis.products.menu;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.menu";
option java_multiple_files = true;
option go_package = "github.com/OpenCannabis/protocol/opencannabis/products/menu";

import "opencannabis/core/datamodel.proto";

import "opencannabis/base/ProductKey.proto";
import "opencannabis/media/MediaKey.proto";
import "opencannabis/temporal/Instant.proto";
import "opencannabis/products/menu/Section.proto";
import "opencannabis/crypto/Integrity.proto";
import "opencannabis/content/ProductContent.proto";
import "opencannabis/content/MaterialsData.proto";

import "opencannabis/products/SKU.proto";
import "opencannabis/products/Apothecary.proto";
import "opencannabis/products/Cartridge.proto";
import "opencannabis/products/Edible.proto";
import "opencannabis/products/Extract.proto";
import "opencannabis/products/Flower.proto";
import "opencannabis/products/Merchandise.proto";
import "opencannabis/products/Plant.proto";
import "opencannabis/products/Preroll.proto";


// Enumerates statuses a menu may assume.
enum Status {
  // Indicates that a menu revision is not yet published.
  UNPUBLISHED = 0;

  // Indicates that a menu revision has been published and is considered live.
  LIVE = 1;
}


// Enumerates flags that can be set on a menu.
enum Flag {
  // Indicates that this entire menu is considered a draft.
  DRAFT = 0;

  // Indicates that the underlying menu data is currently private and should not be exposed publicly.
  PRIVATE = 1;

  // Indicates that the underlying menu data is known to be out-of-date.
  OUT_OF_DATE = 2;
}


// Specifies settings used to generate a menu, or used as input when generating menus.
message MenuSettings {
  // Flag indicating a full menu, including hidden/out-of-stock items.
  bool full = 1;

  // Only include menu keys, no detail data.
  bool keys_only = 2;

  // Don't return the menu if it's identical to this fingerprint.
  opencannabis.crypto.Hash snapshot = 3;

  // Bloom filter to consider when returning or processing menu items.
  opencannabis.crypto.Hash fingerprint = 4;

  // Sections to include in the menu. If unspecified, include all sections.
  repeated opencannabis.products.menu.section.Section section = 5;

  // Hint for other available sections. Included on a sectioned menu payload with only one section.
  repeated opencannabis.products.menu.section.Section available_section = 6;
}


// Specifies metadata for a package of menu data.
message Metadata {
  // Partner location that owns this menu data.
  string scope = 1;

  // Version number, or publish timestamp, of this data.
  uint64 version = 2;

  // Status of this menu data.
  Status status = 3;

  // Flags attached to this menu data.
  repeated Flag flags = 4;

  // When this menu data was published.
  opencannabis.temporal.Instant published = 5;

  // Settings that produced this menu data.
  MenuSettings settings = 6;
}


// Specifies the concept of a tag that may be arbitrarily created and attached to menu products, in a many-to-many-style
// relationship, for the purpose of categorically sorting/managing items.
message ProductTag {
  option (core.db) = {
    mode: GROUP
    path: "tags"
  };

  // ID for the tag. Usually a shortened version of the display name.
  string id = 1 [
    (core.field).type = ID,
    (core.opts).required = true
  ];

  // Partner ID for the account that owns this tag.
  string partner = 2 [(core.opts).required = true];

  // Location ID for the account that owns this tag.
  string location = 3 [(core.opts).required = true];

  // Display text for the tag.
  string display = 4 [(core.opts).required = true];

  // Color code, in hex, for the tag.
  string color = 5;

  // Optional description for this product tag.
  string description = 6;
}


// Specifies a foreign reference for a given menu product. A foreign reference is a unique ID or link between a product
// and that same product in some foreign computer system.
message ForeignReference {
  option (core.db) = {
    mode: GROUP
    path: "references"
  };

  // Generated ID for this unique foreign reference. Ideally, should be based on the formula MD5(domain + key), to allow
  // de-duplication and presence detection with keys-only queries.
  string id = 1 [
    (core.field).type = ID,
    (core.opts).required = true
  ];

  // Foreign key value for a reference between an in-network product and an out-of-network representation of that same
  // product in a different computer system.
  string key = 2 [(core.opts).required = true];

  // Partner ID for the account that owns this foreign reference.
  string partner = 3 [(core.opts).required = true];

  // Location ID for the account that owns this foreign reference.
  string location = 4 [(core.opts).required = true];

  // Domain for the integrating system. This is usually set to a unique domain value that corresponds to the foreign
  // system, and can be used to identify it later.
  string domain = 5 [(core.opts).required = true];

  // URL to this product in the foreign system, if applicable. Can also be a link to a REST URL payload representing
  // this product's data in the foreign system.
  string link = 6;

  // Timestamp for when this foreign reference was attached to a given menu product. This timestamp should only be set
  // once, upon original creation/linking of the foreign reference.
  opencannabis.temporal.Instant attached = 7;

  // Timestamp indicating when this foreign product reference was last validated with the foreign system. Each time an
  // item is fetched or otherwise synchronized, this should be updated.
  opencannabis.temporal.Instant validated = 8;
}


// Menu product payload stanza. Specifies a single product as a member of a menu section. This generic record is used to
// wrap concrete menu product structures to make them generically usable. In V2 data stores, menu products are stored
// generically as a top-level entity (as opposed to V1, in which this model is synthesized from raw map data).
message MenuProduct {
  option (core.db) = {
    mode: GROUP
    path: "products"
  };

  // Key record uniquely identifying this menu product. Keys for saved items are lifted to this property from the
  // attached concrete record below.
  opencannabis.base.ProductKey key = 1 [
    (core.field).type = KEY
  ];

  // Product tags attached to this entry. Product tags are arbitrary phrases or strings that may be attached to product
  // records to help categorize them or facilitate their management. They are not generally end-user-visible.
  repeated ProductTag tag = 2 [
    (core.field).visibility = OWNER,
    (core.collection) = {
      mode: GROUP
      concrete: "tags"
      path: "tags"
    }
  ];

  // Set of foreign references for this product, or, instances in which this product exists in an out-of-network system,
  // in a uniquely identifiable way.
  repeated ForeignReference ref = 3 [
    (core.field).visibility = INTERNAL,
    (core.collection) = {
      mode: GROUP
      concrete: "references"
      path: "references"
    }
  ];

  // Specifies media references for this product. These are gathered from all applicable sub-objects, for instance,
  // product content media and laboratory test result attached media.
  repeated opencannabis.media.MediaReference media = 4 [
    (core.collection) = {
      mode: GROUP
      concrete: "media"
      path: "media"
      embed: true
    }
  ];

  // Specifies Stock-Keeping-Units (SKUs) mapped to this product in foreign systems. This is distinguished from foreign
  // references by the ability to address specific product variants over multiple opaque IDs.
  repeated opencannabis.products.sku.MappedSKU sku = 5 [
    (core.field).visibility = INTERNAL,
    (core.collection) = {
      mode: COLLECTION
      path: "sku"
      embed: true
    }
  ];

  // Describes the location scope that owns this product key, and the underlying data associated with it.
  string owner = 6 [
    (core.field) = {
      type: PARENT
      visibility: INTERNAL
      summary: "Describes the location scope that owns this product key, and the data associated with it."
    }
  ];

  // Content about this product.
  opencannabis.content.ProductContent product = 7 [
    (core.field).summary = "Specifies product-level information or collateral data."
  ];

  // Materials and handling information about this product.
  opencannabis.content.MaterialsData material = 8 [
    (core.field).summary = "Specifies information about the material that constitutes a product."
  ];

  // Content and materials data for this menu product.
  oneof concrete {
    // Apothecary product.
    opencannabis.products.Apothecary apothecary = 10 [(core.opts).concrete = true];

    // Cartridge product.
    opencannabis.products.Cartridge cartridge = 11 [(core.opts).concrete = true];

    // Edible product.
    opencannabis.products.Edible edible = 12 [(core.opts).concrete = true];

    // Extract product.
    opencannabis.products.Extract extract = 13 [(core.opts).concrete = true];

    // Flower product.
    opencannabis.products.Flower flower = 14 [(core.opts).concrete = true];

    // Merchandise product.
    opencannabis.products.Merchandise merchandise = 15 [(core.opts).concrete = true];

    // Plant product.
    opencannabis.products.Plant plant = 16 [(core.opts).concrete = true];

    // Preroll product.
    opencannabis.products.Preroll preroll = 17 [(core.opts).concrete = true];
  }
}


// Specifies an inner menu payload which contains menu data for a given menu section.
message SectionData {
  // Count of products included in this menu section data.
  int32 count = 1;

  // Section that this data is attached to.
  opencannabis.products.menu.section.SectionSpec section = 2;

  // Menu products attached to this section.
  repeated MenuProduct product = 3;
}


// Specifies a menu split into section-level chunks.
message SectionedMenu {
  // Count of all products included in this menu, all sections considered.
  int32 count = 1;

  // Specifies a payload of sectioned menu data.
  repeated SectionData payload = 2;
}


// Specifies an inner menu payload which contains mapped data, where each map key is a section name, lower-cased, and
// each map value is itself a product, and each map is addressed at a typed property name.
message StaticMenu {
  option deprecated = true;

  // Specifies APOTHECARY products attached to this menu.
  map<string, opencannabis.products.Apothecary> apothecary = 1;

  // Specifies CARTRIDGE products attached to this menu.
  map<string, opencannabis.products.Cartridge> cartridges = 2;

  // Specifies EDIBLE products attached to this menu.
  map<string, opencannabis.products.Edible> edibles = 3;

  // Specifies EXTRACT products attached to this menu.
  map<string, opencannabis.products.Extract> extracts = 4;

  // Specifies FLOWER products attached to this menu.
  map<string, opencannabis.products.Flower> flowers = 5;

  // Specifies MERCHANDISE products attached to this menu.
  map<string, opencannabis.products.Merchandise> merchandise = 6;

  // Specifies PLANT products attached to this menu.
  map<string, opencannabis.products.Plant> plants = 7;

  // Specifies PREROLL products attached to this menu.
  map<string, opencannabis.products.Preroll> prerolls = 8;
}


// Holds a full specification for a revision of menu data, segmented into sections, by the categories member products
// are filed in. Categories are enumerated in `menu.Section`.
message Menu {
  // Metadata for the menu.
  Metadata metadata = 1;

  // Specifies menu content, either in repeated section data, or with a static map.
  oneof content {
    // Data payloads attached to this menu.
    SectionedMenu payload = 3;

    // Specifies a static menu, where each section is specified as a typed map, with keys mapped to products.
    StaticMenu menu = 4 [deprecated = true];
  }
}
