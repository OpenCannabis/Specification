
/**
 * Specifies the notion of a Commercial Purchase, which is the upgraded version of a
 * Commercial Order. Purchases always take place in-person.
 */
syntax = "proto3";

package opencannabis.commerce;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.commerce";
option java_multiple_files = false;
option java_outer_classname = "CommercialPurchase";
option go_package = "github.com/OpenCannabis/protocol/opencannabis/commerce";

import "opencannabis/core/datamodel.proto";

import "opencannabis/accounting/Taxes.proto";

import "opencannabis/commerce/Item.proto";
import "opencannabis/commerce/Currency.proto";
import "opencannabis/commerce/Discounts.proto";
import "opencannabis/commerce/Payment.proto";

import "opencannabis/inventory/InventoryProduct.proto";

import "opencannabis/crypto/Signature.proto";

import "opencannabis/temporal/Instant.proto";


// Enumerates statuses that a purchase transaction may take.
enum PurchaseStatus {
  // The purchase has been allocated and has not yet begun filling with data.
  FRESH = 0;

  // The purchase is actively being collaborated on.
  OPEN = 1;

  // The purchase is saved and closed for later recall.
  CLOSED = 2;

  // The purchase was cancelled. This status is terminal.
  VOIDED = 3;

  // The purchase was completed and is now closed. This status prevents edits.
  FINALIZED = 4;

  // The purchase record has been reconciled with accounting systems. This status is terminal.
  RECONCILED = 5;
}


// Specifies the authority under which a particular purchase occurs.
enum PurchaseAuthority {
  // Standard or unspecified authority.
  STANDARD = 0;

  // Medical cannabis authority.
  MEDICAL = 1;

  // Adult-use, or recreational, cannabis authority.
  ADULT_USE = 2;
}


// Specifies a purchase event logged as part of a greater purchase transaction.
enum PurchaseEvent {
  // The status of the ticket changed.
  STATUS = 0;

  // The purchase was saved to the cloud for later use.
  SAVE = 1;

  // The purchase was loaded from the cloud.
  LOAD = 2;

  // An item was added to the ticket.
  ITEM_ADDED = 10;

  // An item was entirely removed from the ticket.
  ITEM_REMOVED = 11;

  // An item's desired quantity was changed.
  ITEM_QUANTITY_CHANGED = 12;

  // A discount was added to a ticket item.
  ITEM_DISCOUNT_ADDED = 13;

  // A discount was removed from a ticket item.
  ITEM_DISCOUNT_REMOVED = 14;

  // The purchase was voided entirely.
  PURCHASE_VOID = 20;

  // The purchase was completed and finalized.
  PURCHASE_FINALIZE = 21;
}


// Specifies an event that takes place against a Purchase.
message PurchaseLogEntry {
  // Status the order moved to.
  PurchaseStatus status = 1;

  PurchaseEvent event = 2;

  // Instant the order was moved to this status.
  opencannabis.temporal.Instant instant = 3;

  // Stock-Keeping-Unit that was related to this purchase event, if applicable.
  string sku = 4;

  // Message or reason given for this status change, if any.
  string message = 5;
}


// Specifies a bill of charges for a given purchase ticket or line item.
message BillOfCharges {
  // Settlement status for this bill. I.e, whether it has been paid for partially, in full, or not at all.
  BillStatus status = 1;

  // Tax entries applied to this item or ticket.
  repeated opencannabis.accounting.Tax tax = 2;

  // Discount entries applied to this item or ticket.
  repeated opencannabis.commerce.Discount discount = 3;

  // Price paid for this item or transaction at the time of purchase.
  double price = 4;

  // Computed tax amount for this receipt line-item or purchase ticket.
  double taxes = 5;

  // Computed discount amount for this receipt line-item or purchase ticket.
  double discounts = 6;

  // Computed item or ticket subtotal amount (equal to count times price less discounts).
  double subtotal = 7;

  // Computed item or ticket total amount (equal to subtotal plus taxes).
  double total = 8;
}


// Specifies an individual item purchased as part of a larger commercial purchase ticket, including any variance values
// required to fully specify the item.
message TicketItem {
  // Key specifying the address of a specific inventory item.
  opencannabis.inventory.InventoryKey key = 1;

  // Stock-Keeping-Unit that was scanned as part of this item being onboarded onto a commercial purchase ticket.
  string sku = 2;

  // Specifies the commercial item
  opencannabis.commerce.Item item = 3;

  // Line-item bill of charges, or purchase sums. Includes taxes and discounts.
  BillOfCharges line = 4;
}


// Specifies a set of timestamps recorded for each purchase.
message PurchaseTimestamps {
  // Timestamp for when a particular purchase was first allocated.
  opencannabis.temporal.Instant established = 1;

  // Timestamp for when a particular purchase was first saved.
  opencannabis.temporal.Instant created = 2;

  // Timestamp for when a particular purchase was last modified.
  opencannabis.temporal.Instant modified = 3;

  // Timestamp for when a purchase was conducted and paid for.
  opencannabis.temporal.Instant executed = 4;

  // Timestamp for when a purchase was finalized after any post-purchase edits.
  opencannabis.temporal.Instant finalized = 5;
}


// Specifies a key that uniquely addresses a purchase made by a consumer.
message PurchaseKey {
  // String UUID generated to address this purchase. Generally allocated client-side.
  string uuid = 1 [
    (core.field).type = ID
  ];
}


// Specifies a cryptographic signature attached to a commercial/retail purchase.
message PurchaseSignature {
  // Verification number allocated for this transaction from a device under the customer's control.
  string nonce = 1;

  // Cryptographic signature issued by the point-of-sale device for this transaction.
  opencannabis.crypto.Signature facilitator = 2;

  // Cryptographic signature issued by the customer for this transaction.
  opencannabis.crypto.Signature customer = 3;
}


// Specifies combined information regarding the customer who made a particular purchase. This includes their digitally
// identifying information, their legal identification, and the authority under which the purchase occurred.
message PurchaseCustomer {
  // Unique and opaque ID, representing this customer's accounting of interactions.
  string unique_id = 1;

  // Digital signature provided by the customer, if applicable and supported.
  PurchaseSignature signature = 2;
}


// Specifies information about the facilitator of a retail/commercial purchase, i.e., the retailer's side of a retail
// transaction with a consumer or patient.
message PurchaseFacilitator {
  // Specifies the authority under which this purchase occurred, if applicable (i.e. medical, vs. adult-use/recreational
  // cannabis purchases, depending on jurisdiction).
  PurchaseAuthority authority = 1;

  // Specifies the opaque ID for the user that conducted the purchase (i.e. the sales agent or budtender).
  string agent = 2;

  // Unique/opaque reference to the partner co-located point-of-sale device that facilitated this transaction.
  string device = 3;

  // Digital signature provided by the facilitator, if applicable and supported.
  PurchaseSignature signature = 4;
}


// Specifies the structure of an individual payment's key.
message PaymentKey {
  // Unique ID provisioned for this payment.
  string uuid = 1 [
    (core.field).type = ID
  ];
}


// Specifies the style, amount, and parameters regarding how this purchase was paid for.
message Payment {
  // Specifies details regarding a cash payment.
  message CashPayment {
    // The amount of cash tendered by the customer for payment.
    opencannabis.commerce.CurrencyValue tendered = 1;

    // The amount of change given back to the customer after payment.
    opencannabis.commerce.CurrencyValue change = 2;
  }

  // Check payment made as part of a greater purchase payment set.
  message CheckPayment {
    // Sequence number from the check for payment.
    string check_number = 1;

    // Routing number from the check for payment. Private and encrypted.
    string routing_number = 2;

    // Account number from the check for payment. Private and encrypted.
    string account_number = 3;

    // Name of the bank or issuing institution. Required if the check is certified.
    string institution = 4;

    // Whether the check is certified or not. Certified checks are issued by institutions, usually banks.
    bool certified = 5;
  }

  // Card-based payment made as part of a greater purchase payment set.
  message CardPayment {
    // Card type used by the customer to pay.
    PaymentCardType card_type = 1;
  }

  // Bank-based payment made as part of a greater purchase payment set.
  message BankPayment {
    // Routing number for the bank account to pay with.
    string routing_number = 1;

    // Account number for the bank to pay with.
    string account_number = 2;

    // Reference code or ID for the transaction.
    string reference = 3;
  }

  // Digital payment made as part of a greater purchase payment set.
  message DigitalPayment {
    // Digital payment network used by the customer.
    DigitalPaymentNetwork network = 1;

    // Username on the digital payment network.
    string username = 2;

    // Reference code or ID for the transaction.
    string reference = 3;
  }

  // Unique key provisioned to address this payment, if applicable.
  PaymentKey key = 1 [
    (core.field).type = KEY
  ];

  // Method of payment used by the customer.
  PaymentMethod method = 2;

  // Status for this payment.
  PaymentStatus status = 3;

  // Amount for this payment.
  double amount = 4;

  // Whether this fully satisfies the order, or not.
  bool full = 5;

  // Specifies details about this payment.
  oneof spec {
    // Payment made with hard cash.
    CashPayment cash = 10;

    // Payment made by check.
    CheckPayment check = 11;

    // Payment made by debit or credit card.
    CardPayment card = 12;

    // Payment made by bank transfer.
    BankPayment bank = 13;

    // Payment made via digital payment networks.
    DigitalPayment digital = 14;
  }
}

