
/**
 * Specifies cryptographic structures related to integrity protection and verification.
 */
syntax = "proto3";

package opencannabis.crypto;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.crypto";
option java_multiple_files = true;


// Enumerates hash algorithms supported or known by the runtime for shared use.
enum HashAlgorithm {
  // Secure Hash Algorithm v2.
  SHA1 = 0;

  // Message Digest v5.
  MD5 = 1;

  // Secure Hash Algorithm, with 256-bit width.
  SHA256 = 2;

  // Secure Hash Algorithm, with 384-bit width.
  SHA384 = 3;

  // Secure Hash Algorithm, with 512-bit width.
  SHA512 = 4;

  // Specifies hashing with MurmurHash.
  MURMUR = 6;
}


// Specifies the hash portion of hashed data, along with the algorithm used to calculate the digest enclosed. This
// particular container does not specify or otherwise contain the original referenced data.
message Hash {
  // Specifies the algorithm in use.
  HashAlgorithm algorithm = 1;

  // Carries the actual data of the calculated digest value.
  oneof digest {
    // Raw binary output of the hash algorithm.
    bytes raw = 2;

    // Hex-encoded digest value.
    string hex = 3;

    // Base64-encoded digest value.
    string b64 = 4;
  }
}


// Specifies a set of raw data, of some kind, and an attached digest/hash value, along with the algorithm used to
// calculate the digest.
message HashedData {
  // Raw data that we are transmitting.
  bytes data = 1;

  // Hash for the raw data in this payload.
  Hash hash = 2;
}
