
/**
 * Specifies Low-Level Reader Protocol (LLRP) structures and definitions.
 */
syntax = "proto3";

package opencannabis.rfid;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.rfid";
option java_multiple_files = true;
option go_package = "github.com/OpenCannabis/protocol/opencannabis/rfid";

import "opencannabis/core/datamodel.proto";
import "opencannabis/temporal/Instant.proto";
import "opencannabis/rfid/RFID.proto";


// Describes available regulatory capabilities, each of which map to a jurisdiction or region, and relevant regulatory
// agency in that region. RFID reader devices support one or more of these region/regulatory configuration profiles and
// should apply the relevant profile when operating in that subject region.
enum RegulatoryCapability {
  // Unspecified regulatory region capability.
  UNSPECIFIED_REGULATORY_REGION = 0;

  // United States: Federal Communications Commission (FCC), Part 15.
  US_FCC = 1;

  // ETSI standard 302-208.
  ETSI_302_208 = 2;

  // ETSI standard 300-220.
  ETSI_300_220 = 3;

  // Australia: LIPD 1W.
  AUSTRALIA_LIPD_1W = 4;

  // Australia: LIPD 4W.
  AUSTRALIA_LIPD_4W = 5;

  // Japan: ARIB Standard T89.
  JAPAN_ARIB_STD_T89 = 6;

  // Hong Kong: OFTA-1049.
  HONGKONG_OFTA_1049 = 7;

  // Taiwan: DGT-LP0002
  TAIWAN_DGT_LP0002 = 8;

  // Korea: MIC Article 5-2
  KOREA_MIC_ARTICLE_5_2 = 9;
}


// Describes the types of start triggers that can be applied to an `ROSpec`. These describe the ways an RFID reader may
// trigger itself to begin scanning for tags.
enum StartTriggerType {
  // No trigger condition is specified. The `ROSpec` will be triggered manually over LLRP.
  NO_START_TRIGGER = 0;

  // Immediately trigger the `ROSpec` after installation.
  IMMEDIATE = 1;

  // Trigger the `ROSpec` periodically, on some time-based interval.
  PERIODIC = 2;

  // Trigger the `ROSpec` via hardware GPIO signals.
  GPIO_START = 3;
}


// Describes the types of stop triggers that may be applied to an RFID reader and set of antennae, via its use in an
// `ROSpec` boundary configuration payload. Stop triggers describe how long to scan for, or when to stop scanning.
enum StopTriggerType {
  // No stop trigger condition is specified. Effectively, this means, "scan forever."
  NO_STOP_TRIGGER = 0;

  // Specifies a deadline-based duration. After the time is up, scanning will stop.
  DURATION = 1;

  // Specifies GPIO-signal-based stop. Once a hardware signal is received, scanning will stop.
  GPIO_STOP = 2;
}


// Describes a boundary, or triggering, configuration profile for a given RFID reader/controller, or ROSpec,
// configuration profile. Boundary configs describe when to start, and stop, scanning for tags.
message BoundaryConfig {
  // Describes the start trigger boundary parameters to apply.
  message StartTrigger {
    // Start trigger type to set, which may carry parameters, or not. Describes to the unit when to make a given RFID
    // reader configuration active and begin scanning.
    StartTriggerType type = 1;

    // Schedule parameter, which is required for periodic triggering.
    uint64 schedule = 2;
  }

  // Describes the stop trigger boundary parameters to apply.
  message StopTrigger {
    // Stop trigger type to set, which may carry parameters, or not, and describes how the unit knows when to stop
    // scanning for RFID tags and emitting events.
    StopTriggerType type = 1;

    // Schedule parameter, which is required for deadline-based stop triggering.
    uint64 schedule = 2;
  }

  // Specifies the start trigger for an `ROSpec`, which describes how RF operations, or reading events, should begin and
  // be emitted to LLRP clients listening for read events.
  StartTrigger start = 1;

  // Specifies the stop trigger for an `ROSpec`, which describes how long to scan for RF tags. Once a stop trigger is
  // met or otherwise satisfied, scanning and event reporting stops.
  StopTrigger stop = 2;
}


// Describes reporting settings that control what is reported back from the antenna when tags are found. This includes
// the items that should be reported, frequency, tags to report, and other details.
message ReportingConfig {
}


// Describes a configuration profile that applies settings to an RFID reader and set of connected antennae. `ROSpec`
// objects correspond with objects in the LLRP spec that control RFID boundary triggers, tag reporting configuration,
// and other aspects of the RF scanning process.
message ROSpec {
  // Unique ID assigned to reference this `ROSpec`.
  uint32 id = 1;

  // Priority value this `ROSpec` should assume.
  uint32 priority = 2;

  // Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
  // for how long, or how to know when to stop.
  BoundaryConfig boundary = 3;

  // Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
  // reader's RFID range. This may include RSSI, antenna number, and more.
  ReportingConfig reporting = 4;
}


// Specifies where a given tag report came from. This would usually include information about the RFID reader that
// emitted the tag report, potentially including an antenna index.
message TagReportOrigin {
  // Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
  // events over LLRP to facilitate RF operations.
  Reader reader = 1 [
    (core.opts).required = true,
    (core.field).summary = "Describes info about the RFID reader device involved in a tag report."
  ];

  // Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
  // telemetry or inventory systems along with the location at which the device is located.
  string partner = 2 [
    (core.opts).required = true,
    (core.field).summary = "Describes the partner account to which the reader device is assigned."
  ];

  // Describes the location account, owned by the partner account specified, where the RFID reader device is physically
  // located. Annotates RFID traffic with licensure/physical boundaries.
  string location = 3 [
    (core.opts).required = true,
    (core.field).summary = "Describes the location, owned by the partner, where the RFID reader is located."
  ];
}


// Reports ths presence of a set of Radio-Frequency Identifier (RFID) tags, in a given zone, which were detected from a
// given RFID reader controller device, from a given antenna or antennae under its control.
message TagReport {
  // Describes information about the antenna that reported a set of tags, if information about the antenna was requested
  // and made available by the reader.
  Antenna antenna = 1 [
    (core.opts).required = true,
    (core.field).summary = "Describes info, if available, about the RFID antenna involved in a tag report."
  ];

  // Specifies information about the tag that was detected in this event.
  Tag tag = 2 [
    (core.opts).required = true,
    (core.field).summary = "Specifies information about the tag that was detected in this event."
  ];

  // Relative Signal Strength indicator value for this tag reading, which describes the relative strength of the signal
  // between the subject tag and the reader/antenna that attenuated with it.
  double rssi = 3 [
    (core.opts).required = true,
    (core.field).summary = "Relative Signal Strength indicator value for this tag reading."
  ];

  // Timestamp describing when this tag was first seen by the RFID apparatus.
  opencannabis.temporal.Instant first_seen = 4 [
    (core.opts).required = true,
    (core.column).bqtype = TIMESTAMP,
    (core.field).summary = "Timestamp describing when this tag was first seen by the RFID apparatus."
  ];

  // Timestamp describing the last moment this tag was seen by the RFID apparatus.
  opencannabis.temporal.Instant last_seen = 5 [
    (core.opts).required = true,
    (core.column).bqtype = TIMESTAMP,
    (core.field).summary = "Timestamp describing the last moment this tag was seen by the RFID apparatus."
  ];

  // Timestamp describing when the edge engine received this reading event.
  opencannabis.temporal.Instant received = 6 [
    (core.opts).required = true,
    (core.column).bqtype = TIMESTAMP,
    (core.field).summary = "Timestamp describing when the edge engine received this reading event."
  ];

  // Describes the count of tags read at the same moment, or in the same tag report, as this tag reading.
  uint32 peers = 7 [
    (core.field).summary = "Describes the count of tags read at the same moment, or in the same tag report."
  ];
}


// Describes a set of RFID tag reports, produced by an RFID reader device, through an antenna, which has attenuated with
// one or more tags and detected their contents as part of an RF survey or reader operation run.
message TagReportSet {
  // Specifies the origin of this tag report, including the reader device and partnership scope.
  TagReportOrigin origin = 1 [
    (core.field).summary = "Specifies the origin of this tag report, including the reader device and scope."
  ];

  // Describes the tags seen in a given tag report set, including each tag's relative signal strength and the antenna
  // that detected the tag in question.
  repeated TagReport report = 2 [
    (core.field).summary = "Describes the tags seen in a given tag report set."
  ];
}
