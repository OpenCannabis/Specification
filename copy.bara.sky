
cookiesRepo = "git@github.com:CookiesCo/OpenCannabis.git"
cookiesBranch = "master"
cookiesLatest = "dev"

platformRepo = "git@github.com:CookiesCo/platform.git"
platformBase = "dev"
platformBranch = "satellite/opencannabis"
platformHttp = "https://github.com/CookiesCo/platform.git"

sourceRepo = "git@github.com:OpenCannabis/Specification.git"
sourceBranch = "master"
upstreamBranch = "ocp/sync"

protocolRepo = "git@github.com:OpenCannabis/Protocol.git"
protocolBranch = "ocp/upstream"

siteRepo = "git@github.com:OpenCannabis/Site.git"
siteBranch = "ocp/upstream"

pythonRepo = "git@github.com:OpenCannabis/Python.git"
pythonBranch = "ocp/upstream"


core.workflow(
    name = "upstream",
    origin = git.origin(
        url = cookiesRepo,
        ref = cookiesBranch,
    ),
    destination = git.destination(
        url = sourceRepo,
        fetch = sourceBranch,
        push = upstreamBranch,
    ),
    origin_files = glob(["**/*.*"]),
    destination_files = glob(["**/*.*"]),
    authoring = authoring.pass_thru(
        "Cookiebot <techteam+github@cookiescalifornia.com>"),
    transformations = [
        core.replace(
            before = "${x}",
            after = "",
            multiline = True,
            regex_groups = {
                "x": "(?m)^.*BEGIN-INTERNAL[\\w\\W]*?END-INTERNAL.*$\\n",
            },
        ),
    ],
)

core.workflow(
    name = "protocol",
    origin = git.origin(
        url = sourceRepo,
        ref = sourceBranch,
    ),
    destination = git.destination(
        url = protocolRepo,
        fetch = "master",
        push = protocolBranch,
    ),
    origin_files = glob([
        ".gitattributes",
        "opencannabis/**/*.proto",
        "opencannabis/**/*.build",
    ]),
    destination_files = glob([
        ".gitattributes",
        "opencannabis/**/*.proto",
        "opencannabis/**/*.build",
    ]),
    authoring = authoring.pass_thru(
        "Cookiebot <techteam+github@cookiescalifornia.com>"),
    transformations = [
        core.replace(
            before = "@gust//gust/core:datamodel",
            after = "//opencannabis/core:Datamodel",
        ),
        core.replace(
            before = "gust/core/datamodel.proto",
            after = "opencannabis/core/Datamodel.proto",
        ),
        core.replace(
            before = "${x}",
            after = "",
            multiline = True,
            regex_groups = {
                "x": "(?m)^.*BEGIN-INTERNAL[\\w\\W]*?END-INTERNAL.*$\\n",
            },
        ),
    ],
)

core.workflow(
    name = "python",
    origin = git.origin(
        url = sourceRepo,
        ref = sourceBranch,
    ),
    destination = git.destination(
        url = pythonRepo,
        fetch = "master",
        push = pythonBranch,
    ),
    origin_files = glob([
        "sdk/python/**",
    ], exclude = [
        "BUILD.bazel",
        "sdk/python/tools/Makefile",
        "sdk/python/tools/ROOT_BUILD.bzl",
    ]),
    destination_files = glob(["**"], exclude = [
        "tools/Makefile",
        "tools/ROOT_BUILD.bzl",
        "external/ocpy.bzl",
    ]),
    authoring = authoring.pass_thru(
        "Cookiebot <techteam+github@cookiescalifornia.com>"),
    transformations = [
        core.move("sdk/python/", ""),
        core.move("WORKSPACE.disabled", "WORKSPACE"),
        core.replace(
            before = "//sdk/python/",
	        after = "//",
	    ),
        core.replace(
            before = "//sdk/python:",
            after = "//:",
        ),
        core.replace(
            before = "//opencannabis/%s",
            after = "@ocp//opencannabis/%s",
            paths = glob(["config/rules.bzl"]),
        ),
        core.replace(
            before = "${x}",
            after = "",
            multiline = True,
            regex_groups = {
                "x": "(?m)^.*BEGIN-INTERNAL[\\w\\W]*?END-INTERNAL.*$\\n",
            },
        ),
    ],
)

core.workflow(
    name = "site",
    origin = git.origin(
        url = cookiesRepo,
        ref = cookiesBranch,
    ),
    destination = git.destination(
        url = siteRepo,
        fetch = "master",
        push = siteBranch,
    ),
    origin_files = glob([
        "site/**/*.*",
    ]),
    destination_files = glob([
        "**/*.*",
    ]),
    authoring = authoring.pass_thru(
        "Cookiebot <techteam+github@cookiescalifornia.com>"),
    transformations = [
        core.move("site/", ""),
        core.replace(
            before = "${x}",
            after = "",
            multiline = True,
            regex_groups = {
                "x": "(?m)^.*BEGIN-INTERNAL[\\w\\W]*?END-INTERNAL.*$\\n",
            },
        ),
    ],
)

core.workflow(
    name = "platform",
    origin = git.origin(
        url = cookiesRepo,
        ref = cookiesLatest,
    ),
    destination = git.github_pr_destination(
        url = platformHttp,
        pr_branch = platformBranch,
        destination_ref = platformBase,
        title = "üèõÔ∏è OpenCannabis Update",
        update_description = True,
        body = "Update `platform` with the latest definitions from the [OpenCannabis Spec](https://github.com/CookiesCo/OpenCannabis).",
        integrates = [],
    ),
    origin_files = glob([
        "opencannabis/*.*",
        "opencannabis/**/*.*",
    ], exclude = [
        "opencannabis/core/BUILD.bazel",
    ]),
    destination_files = glob([
        "opencannabis/*.*",
        "opencannabis/**/*.*",
    ]),
    authoring = authoring.allowed(
        default = "Cookiebot <engineering@cookiescalifornia.com>",
        allowlist = [
            "sam.g@cookies.co",
            "sam.g@cookiescalifornia.com",
            "noah@cookies.co",
            "noah@cookiescalifornia.com",
            "jordan.t@cookies.co",
            "jordan.t@cookiescalifornia.com",
            "marvin@cookies.co",
            "marvin@cookiescalifornia.com",
        ],
    ),
    transformations = [
        metadata.save_author(),
        metadata.expose_label("COPYBARA_INTEGRATE_REVIEW"),
        metadata.expose_label("GITHUB_PR_NUMBER", new_name = "Closes", separator = " #"),
        core.replace(
            before = "${x}",
            after = "",
            multiline = True,
            regex_groups = {
                "x": "(?m)^.*BEGIN-INTERNAL[\\w\\W]*?END-INTERNAL.*$\\n",
            },
        ),
        core.move(
            before = "opencannabis/core/datamodel.proto",
            after = "opencannabis/core/stub/datamodel.proto",
        ),
        core.replace(
            before = "import \"opencannabis/core/datamodel.proto\";",
            after = "import \"gust/core/datamodel.proto\";",
        ),
    ],
)

